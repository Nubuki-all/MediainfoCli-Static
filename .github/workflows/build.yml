name: Build (musl) amd64, arm64, armv7

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:


jobs:
  build-linux-native-musl:
    name: Build linux/amd64 (musl, native)
    runs-on: ubuntu-latest
    steps:
      - name: Install musl toolchain and deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential git musl-tools curl ca-certificates pkg-config wget xz-utils file || true
          mkdir dist
          wget https://mediaarea.net/download/binary/mediainfo/25.09/MediaInfo_CLI_25.09_GNU_FromSource.tar.gz
          tar -xvf *gz
      - name: Build (amd64 musl)
        working-directory: MediaInfo_CLI_GNU_FromSource
        env:
          CC: "musl-gcc"
        run: |
          set -euo pipefail
          CXXFLAGS="-DBUILD_SHARED_LIBS=off" LDFLAGS="-static-libgcc -static-libstdc++ -s -w" ./CLI_Compile.sh
          cd MediaInfo/Project/GNU/CLI
          g++ -std=c++11 -DBUILD_SHARED_LIBS=off -O2 -DUNICODE -FMT_UNICODE=0 -DUNICODE -DSIZE_T_IS_LONG -static-libgcc -static-libstdc++ -static -s -w -o mediainfo CLI_Main.o CommandLine_Parser.o Help.o Core.o  /home/runner/work/MediainfoCli-Static/MediainfoCli-Static/MediaInfo_CLI_GNU_FromSource/MediaInfoLib/Project/GNU/Library/.libs/libmediainfo.a -L../../../../Shared/Source/zlib -lz /home/runner/work/MediainfoCli-Static/MediainfoCli-Static/MediaInfo_CLI_GNU_FromSource/ZenLib/Project/GNU/Library/.libs/libzen.a -lpthread
          file mediainfo
      - name: move artifact (runner)
        working-directory: MediaInfo_CLI_GNU_FromSource
        run: |
          mv MediaInfo/Project/GNU/CLI/mediainfo ../dist/mediainfo-linux-amd64
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mediainfo-linux-amd64
          path: dist/mediainfo-linux-amd64
          
          
  build-linux-musl:
    name: Build MediainfoCli linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: linux-arm64
            dockcross_image: dockcross/linux-arm64-musl
            target: aarch64-linux-gnu
          - name: linux-armv7
            dockcross_image: dockcross/linux-armv7l-musl
            target: arm-linux-gnueabi
    steps:
      - name: Download and extract mediainfo 
        run: |
          mkdir dist
          wget https://mediaarea.net/download/binary/mediainfo/25.09/MediaInfo_CLI_25.09_GNU_FromSource.tar.gz
          tar -xvf *gz
      
      
      - name: Pull dockcross helper script
        working-directory: MediaInfo_CLI_GNU_FromSource
        run: |
          # create dockcross helper in repo root
          docker run --rm ${{ matrix.dockcross_image }} > ./dockcross-${{ matrix.name }}
          chmod +x ./dockcross-${{ matrix.name }}
      - name: Build inside dockcross (matrix)
        env:
          HOST: ${{ matrix.target }}
          CXXV: "$CXX"
        working-directory: MediaInfo_CLI_GNU_FromSource
        run: |
          set -euo pipefail
          CXXFLAGS="-DBUILD_SHARED_LIBS=off"
          LDFLAGS="-static-libgcc -static-libstdc++ -s -w" 
          DOCKCROSS=./dockcross-${{ matrix.name }}
          ${DOCKCROSS} bash -lc "\
            set -euo pipefail; \
            apt update -y && apt -y install wget xz-utils file; \
            ./CLI_Compile.sh --host ${HOST}; \
            cd MediaInfo/Project/GNU/CLI; \
            $CXXV -std=c++11 -DBUILD_SHARED_LIBS=off -O2 -DUNICODE -FMT_UNICODE=0 -DUNICODE -DSIZE_T_IS_LONG -static-libgcc -static-libstdc++ -static -s -w -o mediainfo CLI_Main.o CommandLine_Parser.o Help.o Core.o  /work/MediaInfoLib/Project/GNU/Library/.libs/libmediainfo.a -L../../../../Shared/Source/zlib -lz /work/ZenLib/Project/GNU/Library/.libs/libzen.a -lpthread; \
            file mediainfo; \
          "
      - name: move artifact (runner)
        working-directory: MediaInfo_CLI_GNU_FromSource
        run: |
          mv MediaInfo/Project/GNU/CLI/mediainfo ../dist/mediainfo-${{ matrix.name }}
      - name: Upload artifact (matrix)
        uses: actions/upload-artifact@v4
        with:
          name: mediainfo-${{ matrix.name }}
          path: dist/mediainfo-${{ matrix.name }}

  release:
    runs-on: ubuntu-latest
    needs: [build-linux-musl, build-linux-native-musl]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: binaries

      - name: Upload shared library to draft release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          files: |
            binaries/*
          generate_release_notes: true
          tag_name: latest
          
